{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","loading","setLoading","page","setPage","state","setState","data","React","useMemo","label","hits","map","hit","index","objectID","points","axes","primary","type","position","useEffect","didMount","a","fetch","response","json","console","error","start","className","key","num_comments","onClick","alert","title","url","author","moment","created_at","Date","now","fromNow","disabled","length","tooltip","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.42452b34.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chart } from 'react-charts';\nimport moment from 'moment';\n\nfunction App() {\n  const [loading, setLoading] = useState(() => false);\n  const [page, setPage] = useState(() => 0);\n  const [state, setState] = useState(() => ({}));\n  const data = React.useMemo(() => [\n    {\n      label: 'ID',\n      data: state?.hits?.map((hit, index) => ([index, hit.objectID ?? 0])) ?? [],\n    },\n    {\n      label: 'Votes',\n      data: state?.hits?.map((hit, index) => ([index, hit.points ?? 0])) ?? [],\n    },\n  ], [state]);\n  const axes = React.useMemo(() => [\n    { primary: true, type: 'linear', position: 'bottom' },\n    { type: 'linear', position: 'left' },\n  ], []);\n  useEffect(() => {\n    let didMount = true;\n    const start = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`http://hn.algolia.com/api/v1/search?page=${page}`);\n        const json = await response.json();\n        if (didMount) {\n          setState(json);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(error);\n        setLoading(false);\n      }\n    };\n    start();\n    return () => didMount = false;\n  }, [page]);\n  return (\n    <main className=\"container mx-auto p-4\">\n      <div className=\"flex flex-col\">\n        <div className=\"-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 lg:px-8\">\n          <div className=\"align-middle inline-block min-w-full shadow overflow-hidden sm:rounded-lg border-b border-gray-200\">\n            <table className=\"min-w-full\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Comments\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Vote Count\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Up Vote\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    News Details\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white\">\n                {\n                  state?.hits?.map((hit, index) => (\n                    <tr key={hit?.objectID ?? index}>\n                      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200\">\n                        {hit?.num_comments ?? 0}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200\">\n                        {hit?.points ?? 0}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200\">\n                        <span className=\"cursor-pointer\" onClick={() => alert('hey, hacker!!! not yet implemented ðŸ¤£')}>\n                          â–²\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200 text-sm leading-5 text-gray-500\">\n                        {hit?.title ?? ''} {hit?.url ? (hit.url) : ''} by {hit?.author ?? ''} {moment(hit?.created_at ?? Date.now).fromNow()}\n                      </td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n          <div className=\"flex-1 flex justify-between\">\n            <button\n              onClick={() => setPage(page => {\n                if (page > 0) {\n                  setPage(page - 1);\n                }\n              })}\n              type=\"button\"\n              disabled={loading || (page === 0)}\n              className={`${loading || (page === 0) ? 'opacity-50 cursor-not-allowed' : ''} relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm leading-5 font-medium rounded-md text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150`}\n            >\n              {loading ? 'Loading' : 'Previous'}\n            </button>\n            <button\n              onClick={() => setPage(page => {\n                if ((state?.hits?.length ?? 0) > 0) {\n                  setPage(page + 1);\n                }\n              })}\n              type=\"button\"\n              disabled={loading || ((state?.hits?.length ?? 0) === 0)}\n              className={`${loading || ((state?.hits?.length ?? 0) === 0) ? 'opacity-50 cursor-not-allowed' : ''} ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm leading-5 font-medium rounded-md text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150`}\n            >\n              {loading ? 'Loading' : 'Next'}\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"h-64\">\n        <Chart data={data} axes={axes} tooltip />\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tailwindcss/dist/tailwind.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}